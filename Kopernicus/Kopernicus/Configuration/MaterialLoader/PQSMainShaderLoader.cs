// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        public class PQSMainShaderLoader : PQSMainShader
        {
            // Saturation, default = 1
            [ParserTarget("saturation", optional = true)]
            public NumericParser<float> saturationSetter
            {
                get { return saturation; }
                set { saturation = value; }
            }

            // Contrast, default = 1
            [ParserTarget("contrast", optional = true)]
            public NumericParser<float> contrastSetter
            {
                get { return contrast; }
                set { contrast = value; }
            }

            // Colour Unsaturation (A = Factor), default = (1,1,1,0)
            [ParserTarget("tintColor", optional = true)]
            public ColorParser tintColorSetter
            {
                get { return tintColor; }
                set { tintColor = value; }
            }

            // Near Blend, default = 0.5
            [ParserTarget("powerNear", optional = true)]
            public NumericParser<float> powerNearSetter
            {
                get { return powerNear; }
                set { powerNear = value; }
            }

            // Far Blend, default = 0.5
            [ParserTarget("powerFar", optional = true)]
            public NumericParser<float> powerFarSetter
            {
                get { return powerFar; }
                set { powerFar = value; }
            }

            // NearFar Start, default = 2000
            [ParserTarget("groundTexStart", optional = true)]
            public NumericParser<float> groundTexStartSetter
            {
                get { return groundTexStart; }
                set { groundTexStart = value; }
            }

            // NearFar End, default = 10000
            [ParserTarget("groundTexEnd", optional = true)]
            public NumericParser<float> groundTexEndSetter
            {
                get { return groundTexEnd; }
                set { groundTexEnd = value; }
            }

            // Steep Blend, default = 1
            [ParserTarget("steepPower", optional = true)]
            public NumericParser<float> steepPowerSetter
            {
                get { return steepPower; }
                set { steepPower = value; }
            }

            // Steep Fade Start, default = 20000
            [ParserTarget("steepTexStart", optional = true)]
            public NumericParser<float> steepTexStartSetter
            {
                get { return steepTexStart; }
                set { steepTexStart = value; }
            }

            // Steep Fade End, default = 30000
            [ParserTarget("steepTexEnd", optional = true)]
            public NumericParser<float> steepTexEndSetter
            {
                get { return steepTexEnd; }
                set { steepTexEnd = value; }
            }

            // Steep Texture, default = "white" { }
            [ParserTarget("steepTex", optional = true)]
            public Texture2DParser steepTexSetter
            {
                get { return steepTex; }
                set { steepTex = value; }
            }

            [ParserTarget("steepTexScale", optional = true)]
            private Vector2Parser steepTexScaleSetter
            {
                get { return steepTexScale; }
                set { steepTexScale = value; }
            }

            [ParserTarget("steepTexOffset", optional = true)]
            private Vector2Parser steepTexOffsetSetter
            {
                get { return steepTexOffset; }
                set { steepTexOffset = value; }
            }

            // Steep Bump Map, default = "bump" { }
            [ParserTarget("steepBumpMap", optional = true)]
            public Texture2DParser steepBumpMapSetter
            {
                get { return steepBumpMap; }
                set { steepBumpMap = value; }
            }

            [ParserTarget("steepBumpMapScale", optional = true)]
            private Vector2Parser steepBumpMapScaleSetter
            {
                get { return steepBumpMapScale; }
                set { steepBumpMapScale = value; }
            }

            [ParserTarget("steepBumpMapOffset", optional = true)]
            private Vector2Parser steepBumpMapOffsetSetter
            {
                get { return steepBumpMapOffset; }
                set { steepBumpMapOffset = value; }
            }

            // Steep Near Tiling, default = 1
            [ParserTarget("steepNearTiling", optional = true)]
            public NumericParser<float> steepNearTilingSetter
            {
                get { return steepNearTiling; }
                set { steepNearTiling = value; }
            }

            // Steep Far Tiling, default = 1
            [ParserTarget("steepTiling", optional = true)]
            public NumericParser<float> steepTilingSetter
            {
                get { return steepTiling; }
                set { steepTiling = value; }
            }

            // Low Texture, default = "white" { }
            [ParserTarget("lowTex", optional = true)]
            public Texture2DParser lowTexSetter
            {
                get { return lowTex; }
                set { lowTex = value; }
            }

            [ParserTarget("lowTexScale", optional = true)]
            private Vector2Parser lowTexScaleSetter
            {
                get { return lowTexScale; }
                set { lowTexScale = value; }
            }

            [ParserTarget("lowTexOffset", optional = true)]
            private Vector2Parser lowTexOffsetSetter
            {
                get { return lowTexOffset; }
                set { lowTexOffset = value; }
            }

            // Low Bump Map, default = "bump" { }
            [ParserTarget("lowBumpMap", optional = true)]
            public Texture2DParser lowBumpMapSetter
            {
                get { return lowBumpMap; }
                set { lowBumpMap = value; }
            }

            [ParserTarget("lowBumpMapScale", optional = true)]
            private Vector2Parser lowBumpMapScaleSetter
            {
                get { return lowBumpMapScale; }
                set { lowBumpMapScale = value; }
            }

            [ParserTarget("lowBumpMapOffset", optional = true)]
            private Vector2Parser lowBumpMapOffsetSetter
            {
                get { return lowBumpMapOffset; }
                set { lowBumpMapOffset = value; }
            }

            // Low Near Tiling, default = 1000
            [ParserTarget("lowNearTiling", optional = true)]
            public NumericParser<float> lowNearTilingSetter
            {
                get { return lowNearTiling; }
                set { lowNearTiling = value; }
            }

            // Low Far Tiling, default = 10
            [ParserTarget("lowMultiFactor", optional = true)]
            public NumericParser<float> lowMultiFactorSetter
            {
                get { return lowMultiFactor; }
                set { lowMultiFactor = value; }
            }

            // Low Bump Near Tiling, default = 1
            [ParserTarget("lowBumpNearTiling", optional = true)]
            public NumericParser<float> lowBumpNearTilingSetter
            {
                get { return lowBumpNearTiling; }
                set { lowBumpNearTiling = value; }
            }

            // Low Bump Far Tiling, default = 1
            [ParserTarget("lowBumpFarTiling", optional = true)]
            public NumericParser<float> lowBumpFarTilingSetter
            {
                get { return lowBumpFarTiling; }
                set { lowBumpFarTiling = value; }
            }

            // Mid Texture, default = "white" { }
            [ParserTarget("midTex", optional = true)]
            public Texture2DParser midTexSetter
            {
                get { return midTex; }
                set { midTex = value; }
            }

            [ParserTarget("midTexScale", optional = true)]
            private Vector2Parser midTexScaleSetter
            {
                get { return midTexScale; }
                set { midTexScale = value; }
            }

            [ParserTarget("midTexOffset", optional = true)]
            private Vector2Parser midTexOffsetSetter
            {
                get { return midTexOffset; }
                set { midTexOffset = value; }
            }

            // Mid Bump Map, default = "bump" { }
            [ParserTarget("midBumpMap", optional = true)]
            public Texture2DParser midBumpMapSetter
            {
                get { return midBumpMap; }
                set { midBumpMap = value; }
            }

            [ParserTarget("midBumpMapScale", optional = true)]
            private Vector2Parser midBumpMapScaleSetter
            {
                get { return midBumpMapScale; }
                set { midBumpMapScale = value; }
            }

            [ParserTarget("midBumpMapOffset", optional = true)]
            private Vector2Parser midBumpMapOffsetSetter
            {
                get { return midBumpMapOffset; }
                set { midBumpMapOffset = value; }
            }

            // Mid Near Tiling, default = 1000
            [ParserTarget("midNearTiling", optional = true)]
            public NumericParser<float> midNearTilingSetter
            {
                get { return midNearTiling; }
                set { midNearTiling = value; }
            }

            // Mid Far Tiling, default = 10
            [ParserTarget("midMultiFactor", optional = true)]
            public NumericParser<float> midMultiFactorSetter
            {
                get { return midMultiFactor; }
                set { midMultiFactor = value; }
            }

            // Mid Bump Near Tiling, default = 1
            [ParserTarget("midBumpNearTiling", optional = true)]
            public NumericParser<float> midBumpNearTilingSetter
            {
                get { return midBumpNearTiling; }
                set { midBumpNearTiling = value; }
            }

            // Mid Bump Far Tiling, default = 1
            [ParserTarget("midBumpFarTiling", optional = true)]
            public NumericParser<float> midBumpFarTilingSetter
            {
                get { return midBumpFarTiling; }
                set { midBumpFarTiling = value; }
            }

            // High Texture, default = "white" { }
            [ParserTarget("highTex", optional = true)]
            public Texture2DParser highTexSetter
            {
                get { return highTex; }
                set { highTex = value; }
            }

            [ParserTarget("highTexScale", optional = true)]
            private Vector2Parser highTexScaleSetter
            {
                get { return highTexScale; }
                set { highTexScale = value; }
            }

            [ParserTarget("highTexOffset", optional = true)]
            private Vector2Parser highTexOffsetSetter
            {
                get { return highTexOffset; }
                set { highTexOffset = value; }
            }

            // High Bump Map, default = "bump" { }
            [ParserTarget("highBumpMap", optional = true)]
            public Texture2DParser highBumpMapSetter
            {
                get { return highBumpMap; }
                set { highBumpMap = value; }
            }

            [ParserTarget("highBumpMapScale", optional = true)]
            private Vector2Parser highBumpMapScaleSetter
            {
                get { return highBumpMapScale; }
                set { highBumpMapScale = value; }
            }

            [ParserTarget("highBumpMapOffset", optional = true)]
            private Vector2Parser highBumpMapOffsetSetter
            {
                get { return highBumpMapOffset; }
                set { highBumpMapOffset = value; }
            }

            // High Near Tiling, default = 1000
            [ParserTarget("highNearTiling", optional = true)]
            public NumericParser<float> highNearTilingSetter
            {
                get { return highNearTiling; }
                set { highNearTiling = value; }
            }

            // High Far Tiling, default = 10
            [ParserTarget("highMultiFactor", optional = true)]
            public NumericParser<float> highMultiFactorSetter
            {
                get { return highMultiFactor; }
                set { highMultiFactor = value; }
            }

            // High Bump Near Tiling, default = 1
            [ParserTarget("highBumpNearTiling", optional = true)]
            public NumericParser<float> highBumpNearTilingSetter
            {
                get { return highBumpNearTiling; }
                set { highBumpNearTiling = value; }
            }

            // High Bump Far Tiling, default = 1
            [ParserTarget("highBumpFarTiling", optional = true)]
            public NumericParser<float> highBumpFarTilingSetter
            {
                get { return highBumpFarTiling; }
                set { highBumpFarTiling = value; }
            }

            // Low Transition Start, default = 0
            [ParserTarget("lowStart", optional = true)]
            public NumericParser<float> lowStartSetter
            {
                get { return lowStart; }
                set { lowStart = value; }
            }

            // Low Transition End, default = 0.3
            [ParserTarget("lowEnd", optional = true)]
            public NumericParser<float> lowEndSetter
            {
                get { return lowEnd; }
                set { lowEnd = value; }
            }

            // High Transition Start, default = 0.8
            [ParserTarget("highStart", optional = true)]
            public NumericParser<float> highStartSetter
            {
                get { return highStart; }
                set { highStart = value; }
            }

            // High Transition End, default = 1
            [ParserTarget("highEnd", optional = true)]
            public NumericParser<float> highEndSetter
            {
                get { return highEnd; }
                set { highEnd = value; }
            }

            // AP Global Density, default = 1
            [ParserTarget("globalDensity", optional = true)]
            public NumericParser<float> globalDensitySetter
            {
                get { return globalDensity; }
                set { globalDensity = value; }
            }

            // FogColorRamp, default = "white" { }
            [ParserTarget("fogColorRamp", optional = true)]
            public Texture2DParser fogColorRampSetter
            {
                get { return fogColorRamp; }
                set { fogColorRamp = value; }
            }

            [ParserTarget("fogColorRampScale", optional = true)]
            private Vector2Parser fogColorRampScaleSetter
            {
                get { return fogColorRampScale; }
                set { fogColorRampScale = value; }
            }

            [ParserTarget("fogColorRampOffset", optional = true)]
            private Vector2Parser fogColorRampOffsetSetter
            {
                get { return fogColorRampOffset; }
                set { fogColorRampOffset = value; }
            }

            // PlanetOpacity, default = 1
            [ParserTarget("planetOpacity", optional = true)]
            public NumericParser<float> planetOpacitySetter
            {
                get { return planetOpacity; }
                set { planetOpacity = value; }
            }

            // Constructors
            public PQSMainShaderLoader () : base() { }
            public PQSMainShaderLoader (string contents) : base (contents) { }
            public PQSMainShaderLoader (Material material) : base(material) { }
        }
    }
}
