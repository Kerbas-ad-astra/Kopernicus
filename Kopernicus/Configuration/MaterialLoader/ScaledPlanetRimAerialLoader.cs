// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        [RequireConfigType(ConfigType.Node)]
        public class ScaledPlanetRimAerialLoader : ScaledPlanetRimAerial
        {
            // Wrapper functions for loading from config (until ParserTarget redo)
            [ParserTarget("color", optional = true)]
            public ColorParser colorSetter 
            {
                get { return color; }
                set { color = value; }
            }
            
            [ParserTarget("specular", optional = true)]
            public ColorParser specularSetter 
            {
                get { return specColor; }
                set { specColor = value; }
            }
            
            [ParserTarget("shininess", optional = true)]
            public NumericParser<float> shininessSetter 
            {
                get { return shininess; }
                set { shininess = value; }
            }
            
            [ParserTarget("texture", optional = true)]
            public Texture2DParser textureSetter 
            {
                get { return mainTexture as Texture2D; }
                set { mainTexture = value; }
            }
            
            [ParserTarget("normals", optional = true)]
            public Texture2DParser normalsSetter 
            {
                get { return bumpMap; }
                set { bumpMap = value; }
            }
            
            [ParserTarget("resources", optional = true)]
            public Texture2DParser resourcesSetter 
            {
                get { return resourceMap; }
                set { resourceMap = value; }
            }

            [ParserTarget("rimPower", optional = true)]
            public NumericParser<float> rimPowerSetter 
            {
                get { return rimPower; }
                set { rimPower = value; }
            }
            
            [ParserTarget("rimBlend", optional = true)]
            public NumericParser<float> rimBlendSetter 
            {
                get { return rimBlend; }
                set { rimBlend = value; }
            }
            
            [ParserTarget("rimColorRamp", optional = true)]
            public Texture2DParser rimColorRampSetter 
            {
                get { return rimColorRamp; }
                set { rimColorRamp = value; }
            }

            [ParserTarget("Gradient", optional = true)]
            public Gradient rimColorRampGradientSetter 
            {
                set 
                {
                    // Generate the ramp from a gradient
                    Texture2D ramp = new Texture2D(512, 1);
                    Color[] colors = ramp.GetPixels(0);
                    for(int i = 0; i < colors.Length; i++)
                    {
                        // Compute the position in the gradient
                        float k = ((float) i) / ((float) colors.Length);
                        colors[i] = value.ColorAt(k);
                    }
                    ramp.SetPixels(colors, 0);
                    ramp.Apply(true, false);

                    // Set the color ramp
                    rimColorRamp = ramp;
                }
            }

            public ScaledPlanetRimAerialLoader () : base() { }
            public ScaledPlanetRimAerialLoader (string contents) : base (contents) { }
            public ScaledPlanetRimAerialLoader (Material material) : base(material) { }
        }
    }
}

