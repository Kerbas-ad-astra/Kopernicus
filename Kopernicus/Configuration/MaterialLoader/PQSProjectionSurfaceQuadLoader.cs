// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        public class PQSProjectionSurfaceQuadLoader : PQSProjectionSurfaceQuad
        {
            // Saturation, default = 1
            [ParserTarget("saturation", optional = true)]
            public NumericParser<float> saturationSetter
            {
                get { return saturation; }
                set { saturation = value; }
            }

            // Contrast, default = 1
            [ParserTarget("contrast", optional = true)]
            public NumericParser<float> contrastSetter
            {
                get { return contrast; }
                set { contrast = value; }
            }

            // Colour Unsaturation (A = Factor), default = (1,1,1,0)
            [ParserTarget("tintColor", optional = true)]
            public ColorParser tintColorSetter
            {
                get { return tintColor; }
                set { tintColor = value; }
            }

            // Near Tiling, default = 1000
            [ParserTarget("texTiling", optional = true)]
            public NumericParser<float> texTilingSetter
            {
                get { return texTiling; }
                set { texTiling = value; }
            }

            // Near Blend, default = 0.5
            [ParserTarget("texPower", optional = true)]
            public NumericParser<float> texPowerSetter
            {
                get { return texPower; }
                set { texPower = value; }
            }

            // Far Blend, default = 0.5
            [ParserTarget("multiPower", optional = true)]
            public NumericParser<float> multiPowerSetter
            {
                get { return multiPower; }
                set { multiPower = value; }
            }

            // NearFar Start, default = 2000
            [ParserTarget("groundTexStart", optional = true)]
            public NumericParser<float> groundTexStartSetter
            {
                get { return groundTexStart; }
                set { groundTexStart = value; }
            }

            // NearFar Start, default = 10000
            [ParserTarget("groundTexEnd", optional = true)]
            public NumericParser<float> groundTexEndSetter
            {
                get { return groundTexEnd; }
                set { groundTexEnd = value; }
            }

            // Steep Tiling, default = 1
            [ParserTarget("steepTiling", optional = true)]
            public NumericParser<float> steepTilingSetter
            {
                get { return steepTiling; }
                set { steepTiling = value; }
            }

            // Steep Blend, default = 1
            [ParserTarget("steepPower", optional = true)]
            public NumericParser<float> steepPowerSetter
            {
                get { return steepPower; }
                set { steepPower = value; }
            }

            // Steep Fade Start, default = 20000
            [ParserTarget("steepTexStart", optional = true)]
            public NumericParser<float> steepTexStartSetter
            {
                get { return steepTexStart; }
                set { steepTexStart = value; }
            }

            // Steep Fade End, default = 30000
            [ParserTarget("steepTexEnd", optional = true)]
            public NumericParser<float> steepTexEndSetter
            {
                get { return steepTexEnd; }
                set { steepTexEnd = value; }
            }

            // Deep ground, default = "white" {}
            [ParserTarget("deepTex", optional = true)]
            public Texture2DParser deepTexSetter
            {
                get { return deepTex; }
                set { deepTex = value; }
            }

            [ParserTarget("deepTexScale", optional = true)]
            public Vector2Parser deepTexScaleSetter
            {
                get { return deepTexScale; }
                set { deepTexScale = value; }
            }

            [ParserTarget("deepTexOffset", optional = true)]
            public Vector2Parser deepTexOffsetSetter
            {
                get { return deepTexOffset; }
                set { deepTexOffset = value; }
            }

            // Deep MT, default = "white" {}
            [ParserTarget("deepMultiTex", optional = true)]
            public Texture2DParser deepMultiTexSetter
            {
                get { return deepMultiTex; }
                set { deepMultiTex = value; }
            }

            [ParserTarget("deepMultiTexScale", optional = true)]
            public Vector2Parser deepMultiTexScaleSetter
            {
                get { return deepMultiTexScale; }
                set { deepMultiTexScale = value; }
            }

            [ParserTarget("deepMultiTexOffset", optional = true)]
            public Vector2Parser deepMultiTexOffsetSetter
            {
                get { return deepMultiTexOffset; }
                set { deepMultiTexOffset = value; }
            }

            // Deep MT Tiling, default = 1
            [ParserTarget("deepMultiFactor", optional = true)]
            public NumericParser<float> deepMultiFactorSetter
            {
                get { return deepMultiFactor; }
                set { deepMultiFactor = value; }
            }

            // Main Texture, default = "white" {}
            [ParserTarget("mainTex", optional = true)]
            public Texture2DParser mainTexSetter
            {
                get { return mainTex; }
                set { mainTex = value; }
            }

            [ParserTarget("mainTexScale", optional = true)]
            public Vector2Parser mainTexScaleSetter
            {
                get { return mainTexScale; }
                set { mainTexScale = value; }
            }

            [ParserTarget("mainTexOffset", optional = true)]
            public Vector2Parser mainTexOffsetSetter
            {
                get { return mainTexOffset; }
                set { mainTexOffset = value; }
            }

            // Main MT, default = "white" {}
            [ParserTarget("mainMultiTex", optional = true)]
            public Texture2DParser mainMultiTexSetter
            {
                get { return mainMultiTex; }
                set { mainMultiTex = value; }
            }

            [ParserTarget("mainMultiTexScale", optional = true)]
            public Vector2Parser mainMultiTexScaleSetter
            {
                get { return mainMultiTexScale; }
                set { mainMultiTexScale = value; }
            }

            [ParserTarget("mainMultiTexOffset", optional = true)]
            public Vector2Parser mainMultiTexOffsetSetter
            {
                get { return mainMultiTexOffset; }
                set { mainMultiTexOffset = value; }
            }

            // Main MT Tiling, default = 1
            [ParserTarget("mainMultiFactor", optional = true)]
            public NumericParser<float> mainMultiFactorSetter
            {
                get { return mainMultiFactor; }
                set { mainMultiFactor = value; }
            }

            // High Ground, default = "white" {}
            [ParserTarget("highTex", optional = true)]
            public Texture2DParser highTexSetter
            {
                get { return highTex; }
                set { highTex = value; }
            }

            [ParserTarget("highTexScale", optional = true)]
            public Vector2Parser highTexScaleSetter
            {
                get { return highTexScale; }
                set { highTexScale = value; }
            }

            [ParserTarget("highTexOffset", optional = true)]
            public Vector2Parser highTexOffsetSetter
            {
                get { return highTexOffset; }
                set { highTexOffset = value; }
            }

            // High MT, default = "white" {}
            [ParserTarget("highMultiTex", optional = true)]
            public Texture2DParser highMultiTexSetter
            {
                get { return highMultiTex; }
                set { highMultiTex = value; }
            }

            [ParserTarget("highMultiTexScale", optional = true)]
            public Vector2Parser highMultiTexScaleSetter
            {
                get { return highMultiTexScale; }
                set { highMultiTexScale = value; }
            }

            [ParserTarget("highMultiTexOffset", optional = true)]
            public Vector2Parser highMultiTexOffsetSetter
            {
                get { return highMultiTexOffset; }
                set { highMultiTexOffset = value; }
            }

            // High MT Tiling, default = 1
            [ParserTarget("highMultiFactor", optional = true)]
            public NumericParser<float> highMultiFactorSetter
            {
                get { return highMultiFactor; }
                set { highMultiFactor = value; }
            }

            // Snow, default = "white" {}
            [ParserTarget("snowTex", optional = true)]
            public Texture2DParser snowTexSetter
            {
                get { return snowTex; }
                set { snowTex = value; }
            }

            [ParserTarget("snowTexScale", optional = true)]
            public Vector2Parser snowTexScaleSetter
            {
                get { return snowTexScale; }
                set { snowTexScale = value; }
            }

            [ParserTarget("snowTexOffset", optional = true)]
            public Vector2Parser snowTexOffsetSetter
            {
                get { return snowTexOffset; }
                set { snowTexOffset = value; }
            }

            // Snow MT, default = "white" {}
            [ParserTarget("snowMultiTex", optional = true)]
            public Texture2DParser snowMultiTexSetter
            {
                get { return snowMultiTex; }
                set { snowMultiTex = value; }
            }

            [ParserTarget("snowMultiTexScale", optional = true)]
            public Vector2Parser snowMultiTexScaleSetter
            {
                get { return snowMultiTexScale; }
                set { snowMultiTexScale = value; }
            }

            [ParserTarget("snowMultiTexOffset", optional = true)]
            public Vector2Parser snowMultiTexOffsetSetter
            {
                get { return snowMultiTexOffset; }
                set { snowMultiTexOffset = value; }
            }

            // Snow MT Tiling, default = 1
            [ParserTarget("snowMultiFactor", optional = true)]
            public NumericParser<float> snowMultiFactorSetter
            {
                get { return snowMultiFactor; }
                set { snowMultiFactor = value; }
            }

            // Steep Texture, default = "white" {}
            [ParserTarget("steepTex", optional = true)]
            public Texture2DParser steepTexSetter
            {
                get { return steepTex; }
                set { steepTex = value; }
            }

            [ParserTarget("steepTexScale", optional = true)]
            public Vector2Parser steepTexScaleSetter
            {
                get { return steepTexScale; }
                set { steepTexScale = value; }
            }

            [ParserTarget("steepTexOffset", optional = true)]
            public Vector2Parser steepTexOffsetSetter
            {
                get { return steepTexOffset; }
                set { steepTexOffset = value; }
            }

            // Deep Start, default = 0
            [ParserTarget("deepStart", optional = true)]
            public NumericParser<float> deepStartSetter
            {
                get { return deepStart; }
                set { deepStart = value; }
            }

            // Deep End, default = 0.3
            [ParserTarget("deepEnd", optional = true)]
            public NumericParser<float> deepEndSetter
            {
                get { return deepEnd; }
                set { deepEnd = value; }
            }

            // Main lower boundary start, default = 0
            [ParserTarget("mainLoStart", optional = true)]
            public NumericParser<float> mainLoStartSetter
            {
                get { return mainLoStart; }
                set { mainLoStart = value; }
            }

            // Main lower boundary end, default = 0.5
            [ParserTarget("mainLoEnd", optional = true)]
            public NumericParser<float> mainLoEndSetter
            {
                get { return mainLoEnd; }
                set { mainLoEnd = value; }
            }

            // Main upper boundary start, default = 0.3
            [ParserTarget("mainHiStart", optional = true)]
            public NumericParser<float> mainHiStartSetter
            {
                get { return mainHiStart; }
                set { mainHiStart = value; }
            }

            // Main upper boundary end, default = 0.5
            [ParserTarget("mainHiEnd", optional = true)]
            public NumericParser<float> mainHiEndSetter
            {
                get { return mainHiEnd; }
                set { mainHiEnd = value; }
            }

            // High lower boundary start, default = 0.6
            [ParserTarget("hiLoStart", optional = true)]
            public NumericParser<float> hiLoStartSetter
            {
                get { return hiLoStart; }
                set { hiLoStart = value; }
            }

            // High lower boundary end, default = 0.6
            [ParserTarget("hiLoEnd", optional = true)]
            public NumericParser<float> hiLoEndSetter
            {
                get { return hiLoEnd; }
                set { hiLoEnd = value; }
            }

            // High upper boundary start, default = 0.6
            [ParserTarget("hiHiStart", optional = true)]
            public NumericParser<float> hiHiStartSetter
            {
                get { return hiHiStart; }
                set { hiHiStart = value; }
            }

            // High upper boundary end, default = 0.9
            [ParserTarget("hiHiEnd", optional = true)]
            public NumericParser<float> hiHiEndSetter
            {
                get { return hiHiEnd; }
                set { hiHiEnd = value; }
            }

            // Snow Start, default = 0.9
            [ParserTarget("snowStart", optional = true)]
            public NumericParser<float> snowStartSetter
            {
                get { return snowStart; }
                set { snowStart = value; }
            }

            // Snow End, default = 1
            [ParserTarget("snowEnd", optional = true)]
            public NumericParser<float> snowEndSetter
            {
                get { return snowEnd; }
                set { snowEnd = value; }
            }

            // PlanetOpacity, default = 1
            [ParserTarget("planetOpacity", optional = true)]
            public NumericParser<float> planetOpacitySetter
            {
                get { return planetOpacity; }
                set { planetOpacity = value; }
            }

            // Constructors
            public PQSProjectionSurfaceQuadLoader () : base() { }
            public PQSProjectionSurfaceQuadLoader (string contents) : base (contents) { }
            public PQSProjectionSurfaceQuadLoader (Material material) : base(material) { }
        }
    }
}
