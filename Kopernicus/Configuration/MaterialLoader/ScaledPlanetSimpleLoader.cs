// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        [RequireConfigType(ConfigType.Node)]
        public class ScaledPlanetSimpleLoader : ScaledPlanetSimple
        {
            // Wrapper functions for loading from config (until ParserTarget redo)
            [ParserTarget("color", optional = true)]
            public ColorParser colorSetter 
            {
                get { return color; }
                set { color = value; }
            }

            [ParserTarget("specular", optional = true)]
            public ColorParser specularSetter 
            {
                get { return specColor; }
                set { specColor = value; }
            }

            [ParserTarget("shininess", optional = true)]
            public NumericParser<float> shininessSetter 
            {
                get { return shininess; }
                set { shininess = value; }
            }
            
            [ParserTarget("texture", optional = true)]
            public Texture2DParser textureSetter 
            {
                get { return mainTexture as Texture2D; }
                set { mainTexture = value; }
            }
            
            [ParserTarget("normals", optional = true)]
            public Texture2DParser normalsSetter 
            {
                get { return bumpMap; }
                set { bumpMap = value; }
            }
            
            [ParserTarget("resources", optional = true)]
            public Texture2DParser resourcesSetter 
            {
                get { return resourceMap; }
                set { resourceMap = value; }
            }
            
            public ScaledPlanetSimpleLoader () : base() { }
            public ScaledPlanetSimpleLoader (string contents) : base (contents) { }
            public ScaledPlanetSimpleLoader (Material material) : base(material) { }
        }
    }
}
