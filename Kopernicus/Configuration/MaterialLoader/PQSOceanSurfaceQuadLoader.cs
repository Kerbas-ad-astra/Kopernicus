// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

using Kopernicus.MaterialWrapper;

namespace Kopernicus
{
    namespace Configuration
    {
        public class PQSOceanSurfaceQuadLoader : PQSOceanSurfaceQuad
        {
            // Main Color, default = (1,1,1,1)
            [ParserTarget("color", optional = true)]
            public ColorParser colorSetter
            {
                get { return color; }
                set { color = value; }
            }

            // Color From Space, default = (1,1,1,1)
            [ParserTarget("colorFromSpace", optional = true)]
            public ColorParser colorFromSpaceSetter
            {
                get { return colorFromSpace; }
                set { colorFromSpace = value; }
            }

            // Specular Color, default = (1,1,1,1)
            [ParserTarget("specColor", optional = true)]
            public ColorParser specColorSetter
            {
                get { return specColor; }
                set { specColor = value; }
            }

            // Shininess, default = 0.078125
            [ParserTarget("shininess", optional = true)]
            public NumericParser<float> shininessSetter
            {
                get { return shininess; }
                set { shininess = value; }
            }

            // Gloss, default = 0.078125
            [ParserTarget("gloss", optional = true)]
            public NumericParser<float> glossSetter
            {
                get { return gloss; }
                set { gloss = value; }
            }

            // Tex Tiling, default = 1
            [ParserTarget("tiling", optional = true)]
            public NumericParser<float> tilingSetter
            {
                get { return tiling; }
                set { tiling = value; }
            }

            // Tex0, default = "white" {}
            [ParserTarget("waterTex", optional = true)]
            public Texture2DParser waterTexSetter
            {
                get { return waterTex; }
                set { waterTex = value; }
            }

            [ParserTarget("waterTexScale", optional = true)]
            public Vector2Parser waterTexScaleSetter
            {
                get { return waterTexScale; }
                set { waterTexScale = value; }
            }

            [ParserTarget("waterTexOffset", optional = true)]
            public Vector2Parser waterTexOffsetSetter
            {
                get { return waterTexOffset; }
                set { waterTexOffset = value; }
            }

            // Tex1, default = "white" {}
            [ParserTarget("waterTex1", optional = true)]
            public Texture2DParser waterTex1Setter
            {
                get { return waterTex1; }
                set { waterTex1 = value; }
            }

            [ParserTarget("waterTex1Scale", optional = true)]
            public Vector2Parser waterTex1ScaleSetter
            {
                get { return waterTex1Scale; }
                set { waterTex1Scale = value; }
            }

            [ParserTarget("waterTex1Offset", optional = true)]
            public Vector2Parser waterTex1OffsetSetter
            {
                get { return waterTex1Offset; }
                set { waterTex1Offset = value; }
            }

            // Normal Tiling, default = 1
            [ParserTarget("bTiling", optional = true)]
            public NumericParser<float> bTilingSetter
            {
                get { return bTiling; }
                set { bTiling = value; }
            }

            // Normalmap0, default = "bump" {}
            [ParserTarget("bumpMap", optional = true)]
            public Texture2DParser bumpMapSetter
            {
                get { return bumpMap; }
                set { bumpMap = value; }
            }

            [ParserTarget("bumpMapScale", optional = true)]
            public Vector2Parser bumpMapScaleSetter
            {
                get { return bumpMapScale; }
                set { bumpMapScale = value; }
            }

            [ParserTarget("bumpMapOffset", optional = true)]
            public Vector2Parser bumpMapOffsetSetter
            {
                get { return bumpMapOffset; }
                set { bumpMapOffset = value; }
            }

            // Water Movement, default = 1
            [ParserTarget("displacement", optional = true)]
            public NumericParser<float> displacementSetter
            {
                get { return displacement; }
                set { displacement = value; }
            }

            // Water Freq, default = 1
            [ParserTarget("dispFreq", optional = true)]
            public NumericParser<float> dispFreqSetter
            {
                get { return dispFreq; }
                set { dispFreq = value; }
            }

            // Mix, default = 1
            [ParserTarget("mix", optional = true)]
            public NumericParser<float> mixSetter
            {
                get { return mix; }
                set { mix = value; }
            }

            // Opacity, default = 1
            [ParserTarget("oceanOpacity", optional = true)]
            public NumericParser<float> oceanOpacitySetter
            {
                get { return oceanOpacity; }
                set { oceanOpacity = value; }
            }

            // Falloff Power, default = 1
            [ParserTarget("falloffPower", optional = true)]
            public NumericParser<float> falloffPowerSetter
            {
                get { return falloffPower; }
                set { falloffPower = value; }
            }

            // Falloff Exp, default = 2
            [ParserTarget("falloffExp", optional = true)]
            public NumericParser<float> falloffExpSetter
            {
                get { return falloffExp; }
                set { falloffExp = value; }
            }

            // AP Fog Color, default = (0,0,1,1)
            [ParserTarget("fogColor", optional = true)]
            public ColorParser fogColorSetter
            {
                get { return fogColor; }
                set { fogColor = value; }
            }

            // AP Height Fall Off, default = 1
            [ParserTarget("heightFallOff", optional = true)]
            public NumericParser<float> heightFallOffSetter
            {
                get { return heightFallOff; }
                set { heightFallOff = value; }
            }

            // AP Global Density, default = 1
            [ParserTarget("globalDensity", optional = true)]
            public NumericParser<float> globalDensitySetter
            {
                get { return globalDensity; }
                set { globalDensity = value; }
            }

            // AP Atmosphere Depth, default = 1
            [ParserTarget("atmosphereDepth", optional = true)]
            public NumericParser<float> atmosphereDepthSetter
            {
                get { return atmosphereDepth; }
                set { atmosphereDepth = value; }
            }

            // FogColorRamp, default = "white" {}
            [ParserTarget("fogColorRamp", optional = true)]
            public Texture2DParser fogColorRampSetter
            {
                get { return fogColorRamp; }
                set { fogColorRamp = value; }
            }

            [ParserTarget("fogColorRampScale", optional = true)]
            public Vector2Parser fogColorRampScaleSetter
            {
                get { return fogColorRampScale; }
                set { fogColorRampScale = value; }
            }

            [ParserTarget("fogColorRampOffset", optional = true)]
            public Vector2Parser fogColorRampOffsetSetter
            {
                get { return fogColorRampOffset; }
                set { fogColorRampOffset = value; }
            }

            // FadeStart, default = 1
            [ParserTarget("fadeStart", optional = true)]
            public NumericParser<float> fadeStartSetter
            {
                get { return fadeStart; }
                set { fadeStart = value; }
            }

            // FadeEnd, default = 1
            [ParserTarget("fadeEnd", optional = true)]
            public NumericParser<float> fadeEndSetter
            {
                get { return fadeEnd; }
                set { fadeEnd = value; }
            }

            // PlanetOpacity, default = 1
            [ParserTarget("planetOpacity", optional = true)]
            public NumericParser<float> planetOpacitySetter
            {
                get { return planetOpacity; }
                set { planetOpacity = value; }
            }

            // Constructors
            public PQSOceanSurfaceQuadLoader () : base() { }
            public PQSOceanSurfaceQuadLoader (string contents) : base (contents) { }
            public PQSOceanSurfaceQuadLoader (Material material) : base(material) { }
        }
    }
}
